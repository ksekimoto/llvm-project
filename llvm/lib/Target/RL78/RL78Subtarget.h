//===-- RL78Subtarget.h - Define Subtarget for the RL78 -------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file declares the RL78 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_RL78_RL78SUBTARGET_H
#define LLVM_LIB_TARGET_RL78_RL78SUBTARGET_H

#include "RL78FrameLowering.h"
#include "RL78ISelLowering.h"
#include "RL78InstrInfo.h"
#include "RL78SelectionDAGTargetInfo.h"

#define GET_SUBTARGETINFO_HEADER
#include "RL78GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class RL78Subtarget : public RL78GenSubtargetInfo {
public:
  enum RL78Core {
    RL78_S1,
    RL78_S2,
    RL78_S3,
  };
  enum RL78CallingConvention {
    CCRL,
    GCC,
  };
  enum RL78MemoryModel {
    NEAR,
    FAR,
  };

  enum class RL78MirrorSource { Zero, One, Common };
  enum class RL78RomModel { Near, Far, Common };

private:
  Triple TargetTriple;
  virtual void anchor();
  RL78Core coreType;
  RL78CallingConvention callingConvention;
  bool has64BitDoubles;
  unsigned char mirrorSource;
  bool hasFarCodeModel;
  bool hasFarDataModel;
  unsigned char romModel;
  bool disableMDA;
  bool useAllRegs;
  RL78MemoryModel dataModel;

  RL78InstrInfo InstrInfo;
  RL78TargetLowering TLInfo;
  RL78SelectionDAGTargetInfo TSInfo;
  RL78FrameLowering FrameLowering;

public:
  RL78Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                const TargetMachine &TM);

  const RL78InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const TargetFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const RL78RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }
  const RL78TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  bool enablePostRAScheduler() const override { return true; }

  bool useAA() const override { return true; }

  bool Has64BitDoubles() const { return has64BitDoubles; }
  bool HasFarCodeModel() const { return hasFarCodeModel; }
  bool isRL78S1CoreType() const { return coreType == RL78_S1; }
  bool isRL78S3CoreType() const { return coreType == RL78_S3; }
  bool isUseMDA() const { return (coreType == RL78_S2) && (!disableMDA); }
  bool HasCCRLCallingConvention() const { return callingConvention == CCRL; }

  /// Enable tracking of subregister liveness in register allocator.
  bool enableSubRegLiveness() const override { return true; }

  /// True if the subtarget should consider the cost of local intervals
  /// created by a split candidate when choosing the best split candidate.
  // RL78 LLVM 15
  // bool enableAdvancedRASplitCost() const override { return true; }
  bool enableAdvancedRASplitCost() const { return true; }

  bool enableJoinGlobalCopies() const override {
    // OBS. Might return to default behaviour later if we make other changes!
    return true;
  }

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);
  RL78Subtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);
};

} // end namespace llvm

#endif
