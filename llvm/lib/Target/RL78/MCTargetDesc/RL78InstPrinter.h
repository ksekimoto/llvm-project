//===-- RL78InstPrinter.h - Convert RL78 MCInst to assembly syntax ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This class prints an RL78 MCInst to a .s file.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_RL78_INSTPRINTER_RL78INSTPRINTER_H
#define LLVM_LIB_TARGET_RL78_INSTPRINTER_RL78INSTPRINTER_H

#include "MCTargetDesc/RL78MCTargetDesc.h"
#include "llvm/MC/MCInstPrinter.h"

namespace llvm {

class RL78InstPrinter : public MCInstPrinter {
public:
  RL78InstPrinter(const MCAsmInfo &MAI, const MCInstrInfo &MII,
                  const MCRegisterInfo &MRI)
      : MCInstPrinter(MAI, MII, MRI) {}

  void printRegName(raw_ostream &OS, unsigned RegNo) const override;
  void printInst(const MCInst *MI, uint64_t Address, StringRef Annot,
                 const MCSubtargetInfo &STI, raw_ostream &O) override;
  // Autogenerated by tblgen.
  void printInstruction(const MCInst *MI, uint64_t Address,
                        const MCSubtargetInfo &STI, raw_ostream &O);
  bool printAliasInstr(const MCInst *MI, const MCSubtargetInfo &STI,
                       raw_ostream &O);
  static const char *getRegisterName(unsigned RegNo,
                                     unsigned AltIdx = RL78::NoRegAltName);

  void printOperand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                    raw_ostream &OS);
  void printMemOperand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                       raw_ostream &OS, const char *Modifier = nullptr);
  void printCCOperand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                      raw_ostream &OS);
  void printSELRBxOperand(const MCInst *MI, int opNum,
                          const MCSubtargetInfo &STI, raw_ostream &O);
  void printBitOperand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                       raw_ostream &O);
  void printShiftOperand(const MCInst *MI, int opNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printABS8Operand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                        raw_ostream &O);
  void printSfrOperand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                       raw_ostream &O);

  void printABS16Operand(const MCInst *MI, int opNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printABS5Operand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                        raw_ostream &O);
  void printABS20Operand(const MCInst *MI, int opNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printStackSlotOperand(const MCInst *MI, int opNum,
                             const MCSubtargetInfo &STI, raw_ostream &O);
  void printRel8Operand(const MCInst *MI, int opNum, const MCSubtargetInfo &STI,
                        raw_ostream &O);
  void printRel16Operand(const MCInst *MI, int opNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printHLMemOperand(const MCInst *MI, int opNum,
                         const MCSubtargetInfo &STI, raw_ostream &O);
  void printRegSumMemOperand(const MCInst *MI, int opNum,
                             const MCSubtargetInfo &STI, raw_ostream &O);
  void printEsRegMemOperand(const MCInst *MI, int opNum,
                            const MCSubtargetInfo &STI, raw_ostream &O);
  void printEsAddr16Operand(const MCInst *MI, int opNum,
                            const MCSubtargetInfo &STI, raw_ostream &O);
  void printEsRegRegSumMemOperand(const MCInst *MI, int opNum,
                                  const MCSubtargetInfo &STI, raw_ostream &O);
  void printEsRegHLOnlyMemOperand(const MCInst *MI, int opNum,
                                  const MCSubtargetInfo &STI, raw_ostream &O);
};
} // end namespace llvm

#endif
